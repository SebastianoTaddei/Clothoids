'''

This file overrides the conf.py file generated by Sphinx. This is required since
some but not all of the configuration options are available via the
sphinx-quickstart command.

This script does the following:

- If the user wants to document a Python project, then we add the path to the
   project to the sys.path variable.
- If the user wants to document a C/C++ project, then we set the
  breathe_projects variable.
- We set the html_theme variable to the theme we use at our organisation.

Note:

- We use a Python script instead of something better suited for this task like
  pearl or bash because we want to keep the dependencies of this project to a
  minimum (since Python is already a dependency of Sphinx).
- For the same reason, we use only standard Python libraries, and keep
  third-party libraries to a minimum.

'''

#1# IMPORTS

# Partial standard imports
from pathlib import Path # to get the path to the Python project

# Standard imports
import os  # to join paths
import sys # to get the command line arguments and exit the script

#1# FUNCTIONS

def override(config):
    '''
    override overrides the conf.py file generated by Sphinx.

    :param config: The configuration dictionary.
    :type config: dict
    :return: A boolean indicating whether the override was successful.
    :rtype: bool
    '''

    # Open the conf.py file and read its contents
    try:
        with open(config['file'], 'r', encoding='utf-8') as file:
            conf_py = file.read()
    except FileNotFoundError:
        print(f'Error: The file {config["file"]} does not exist.')
        return False

    # If the user wants to document a Python project, then we add the path to
    # the project to the sys.path variable at the top of the conf.py file
    if config['doc_python_package'] is True:
        parent_path = Path(config['python_package_path']).parent
        conf_py     = ( 'import sys\n'
                        'import os\n'
                       f'sys.path.insert(0, os.path.abspath(\'{parent_path}\'))\n\n') + conf_py

    # If the user wants to document a C/C++ project, then we set the
    # breathe_projects variable at the end of the conf.py file
    if config['doc_cpp_project'] is True:
        cpp_path = os.path.join(config['doxygen_path'], 'xml')
        conf_py += (  '\n'
                     f'breathe_projects = {{\'{config["project_name"]}\': \'{cpp_path}\'}}\n')

    # We set the html_theme variable to the theme we use at our organisation
    conf_py = conf_py.replace('html_theme = \'alabaster\'', 'html_theme = \'sphinx_material\'')

    # Write the new conf.py file
    try:
        with open(config['file'], 'w', encoding='utf-8') as file:
            file.write(conf_py)
    except FileNotFoundError:
        print(f'Error: The file {config["file"]} does not exist.')
        return False

    return True

def main():
    '''
    main is the main function of this script. It calls override with the
    configuration dictionary generated by Sphinx.

    :return: A boolean indicating whether the override was successful.
    :rtype: bool
    '''

    # Get the command line arguments
    config                        = {}
    config['file']                = sys.argv[1]
    config['doc_python_package']  = sys.argv[2] == 'true'
    config['python_package_path'] = sys.argv[3]
    config['doc_cpp_project']     = sys.argv[4] == 'true'
    config['doxygen_path']        = sys.argv[5]
    config['project_name']        = sys.argv[6]

    # Override the conf.py file
    result = override(config)

    return result

#1# MAIN

if __name__ == '__main__':
    RESULT = main()

    # Return the result
    if RESULT is True:
        sys.exit(0)
    else:
        sys.exit(1)
