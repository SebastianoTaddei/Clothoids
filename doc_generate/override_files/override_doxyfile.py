'''

This file overrides the Doxyfile file generated by Doxygen. This is required
since you cannot edit it during doxygen -g.

This script does the following:

- It does something only if the user want to document a C/C++ project.
- It sets the PROJECT_NAME variable.
- It sets the PROJECT_NUMBER variable.
- It sets the OUTPUT_DIRECTORY variable.
- It sets the INPUT variable.
- It sets the RECURSIVE variable.
- It sets the EXTRACT_ALL variable.
- It sets the EXTRACT_PRIVATE variable.
- It sets the EXTRACT_STATIC variable.
- It sets the GENERATE_LATEX variable.
- It sets the GENERATE_XML variable.
- It sets the GENERATE_HTML variable.
- It sets the FILE_PATTERNS variable.

Note:

- We use a Python script instead of something better suited for this task like
  pearl or bash because we want to keep the dependencies of this project to a
  minimum (since Python is already a dependency of Sphinx).
- For the same reason, we use only standard Python libraries, and keep
  third-party libraries to a minimum.

'''

#1# IMPORTS

# Standard imports
import re  # for regular expressions
import sys # to get the command line arguments and exit the script

#1# FUNCTIONS

def override(config):
    '''
    override overrides the Doxyfile file generated by Sphinx.

    :param config: The configuration dictionary.
    :type config: dict
    :return: A boolean indicating whether the override was successful.
    :rtype: bool
    '''

    # We do nothing if the user does not want to document a C/C++ project
    if config['doc_cpp_project'] is False:
        return True

    # Open the Doxyfile file and read its contents
    try:
        with open(config['file'], 'r', encoding='utf-8') as file:
            doxyfile = file.read()
    except FileNotFoundError:
        print(f'Error: The file {config["file"]} does not exist.')
        return False

    # We set some variables
    # Set the PROJECT_NAME variable
    doxyfile = doxyfile.replace( 'PROJECT_NAME           = "My Project"',
                                f'PROJECT_NAME           = "{config["project_name"]}"')

    # Set the PROJECT_NUMBER variable
    doxyfile = doxyfile.replace( 'PROJECT_NUMBER         =',
                                f'PROJECT_NUMBER         = {config["project_version"]}')

    # Set the OUTPUT_DIRECTORY variable
    doxyfile = doxyfile.replace( 'OUTPUT_DIRECTORY       =',
                                f'OUTPUT_DIRECTORY       = "{config["doxygen_path"]}"')

    # Set the INPUT variable
    doxyfile = doxyfile.replace( 'INPUT                  =',
                                f'INPUT                  = "{config["cpp_package_path"]}"')

    # Set the RECURSIVE variable
    doxyfile = doxyfile.replace('RECURSIVE              = NO',
                                'RECURSIVE              = YES')

    # Set the EXTRACT_ALL variable
    doxyfile = doxyfile.replace('EXTRACT_ALL            = NO',
                                'EXTRACT_ALL            = YES')

    # Set the EXTRACT_PRIVATE variable
    doxyfile = doxyfile.replace('EXTRACT_PRIVATE        = NO',
                                'EXTRACT_PRIVATE        = YES')

    # Set the EXTRACT_STATIC variable
    doxyfile = doxyfile.replace('EXTRACT_STATIC         = NO',
                                'EXTRACT_STATIC         = YES')

    # Set the GENERATE_LATEX variable
    doxyfile = doxyfile.replace('GENERATE_LATEX         = NO',
                                'GENERATE_LATEX         = YES')

    # Set the GENERATE_XML variable
    doxyfile = doxyfile.replace('GENERATE_XML           = NO',
                                'GENERATE_XML           = YES')

    # Set the GENERATE_HTML variable
    doxyfile = doxyfile.replace('GENERATE_HTML          = YES',
                                'GENERATE_HTML          = NO')

    # Find the FILE_PATTERNS variable, delete the line it is on, and add a new
    # line with the correct value
    file_patterns = 'FILE_PATTERNS          ='
    cpp_patterns  = '*.c *.cc *.cxx *.cpp *.c++ *.h *.hh *.hxx *.hpp *.h++'
    doxyfile      = re.sub(rf'{file_patterns}.+', f'{file_patterns} {cpp_patterns}', doxyfile)

    # Delete all lines that have this pattern "*.ext \" where ext can be any
    # extension
    doxyfile = re.sub(r'\*.\S+ \\\n', '', doxyfile)

    # Delete all lines that start with len(file_patterns)+1 white spaces, then
    # they have this pattern "*.", then they have one or more characters, then
    # end with "\n"
    doxyfile = re.sub(rf'{" " * (len(file_patterns) + 1)}\*.\S+\n', '', doxyfile)


    # Write the new Doxyfile file
    try:
        with open(config['file'], 'w', encoding='utf-8') as file:
            file.write(doxyfile)
    except FileNotFoundError:
        print(f'Error: The file {config["file"]} does not exist.')
        return False

    return True

def main():
    '''
    main is the main function of this script. It calls override with the
    configuration dictionary generated by Sphinx.

    :return: A boolean indicating whether the override was successful.
    :rtype: bool
    '''

    # Get the command line arguments
    config                     = {}
    config['file']             = sys.argv[1]
    config['doc_cpp_project']  = sys.argv[2] == 'true'
    config['project_name']     = sys.argv[3]
    config['project_version']  = sys.argv[4]
    config['doxygen_path']     = sys.argv[5]
    config['cpp_package_path'] = sys.argv[6]

    # Override the Doxyfile file
    result = override(config)

    return result

#1# MAIN

if __name__ == '__main__':
    RESULT = main()

    # Return the result
    if RESULT is True:
        sys.exit(0)
    else:
        sys.exit(1)
